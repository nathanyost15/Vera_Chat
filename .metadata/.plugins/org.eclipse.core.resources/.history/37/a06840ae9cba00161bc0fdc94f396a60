

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;

import utils.NFunction;
import utils.Timer;
/**
 * @author Nathaniel Yost
 * Dr. Frye
 * CSC328
 * DUE: 5 December 2016
 * Purpose: User is given an independent thread to communicate back and forth 
 * 			with the server and other clients.
 */
public class User implements Runnable
{	
	private Socket socket;
	private InputStream inStream;
	private OutputStream outStream;
	private String username;
	private Timer time;
	private ChatRoom room;
	private NFunction functions;
	
	private boolean ended;
	private final String[] CMDS = {"BYE", "HELP", "USERS", "COUNT"};
	public User(ChatRoom room, Socket socket)
	{		
		this.room = room;
		ended = false;
		this.socket = socket;
		try
		{
			inStream = socket.getInputStream();
			outStream = socket.getOutputStream();
		}
		catch(IOException e) {e.printStackTrace();}
		time = new Timer();
		functions = new NFunction(socket);
	}	
	
	public void run()
	{
		// Greet client connection
		functions.send("HELLO");
		getUsername();
		room.echo("["+ username + "] " + " has joined the room..");
		while(!ended)
		{
			String request = functions.recvS();
			//System.out.println(request);
			switch(request)
			{
				case "BYE": // Client requests closing of socket
					room.echo("["+ username + "] " + " has left the room..");
					closeSocket();
					ended = true;
					break;
				case "HELP":
					echoMessage("Commands");
					for(String s : CMDS)
						echoMessage(s);
					break;
				case "USERS":
					for(String s : room.getNames())
					{
						echoMessage(s);
					}
					break;
				case "COUNT":
					echoMessage(room.getUsers().size()+"");
					break;
				default:
					room.echo("["+ username + "] "+request);
					break;
			}
		}
	}	
	
	public void echoMessage(String message)
	{
		functions.send(message);
	}
	
	public String getUser()
	{
		return username;
	}
	
	public Socket getSocket()
	{
		return socket;
	}
	
	public boolean getDone()
	{
		return ended;
	}
	
	public void getUsername()
	{
		try
		{									
			while(true)
			{
				String name = functions.recvS();
				if(room.isUnique(name))
				{
					functions.send("READY");
					username = name;
					return;
				}
				else						
				{
					functions.send("RETRY");
				}
			}					
		}			
		catch(NullPointerException exception) {System.err.println("Null reference error"); closeSocket();}
		catch(Exception exception){closeSocket();}
	}
	
	private boolean closeSocket()
	{
		try
		{
			socket.close();
			return true;
		}
		catch(IOException e){e.printStackTrace(); return false;}
	}
}